using Infrastructure.Models.AHP;
using UseCase.Business_Logic;
<<<<<<< HEAD
=======
using System.Reflection;
using System.Text;
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6

namespace Infrastructure.AIChat
{
    public interface IAHPRecommendationService
    {
        Task<string> GenerateRecommendationResponseAsync(string userQuery, string userSessionId);
        Task<List<AHPProductScore>> GetPersonalizedRecommendationsAsync(string userQuery, string userSessionId);
        Task<string> ExtractCriteriaFromQueryAsync(string userQuery);
        Task<List<AHPComparisonMatrix>> GenerateComparisonMatrixFromQueryAsync(string userQuery, string userSessionId);
    }

    public class AHPRecommendationService : IAHPRecommendationService
    {
        private readonly IAHPService _ahpService;
        private readonly IProductManage _productManage;

        public AHPRecommendationService(IAHPService ahpService, IProductManage productManage)
        {
            _ahpService = ahpService;
            _productManage = productManage;
        }

        public async Task<string> GenerateRecommendationResponseAsync(string userQuery, string userSessionId)
        {
            var extractedCriteria = await ExtractCriteriaFromQueryAsync(userQuery);
            var recommendations = await GetPersonalizedRecommendationsAsync(userQuery, userSessionId);
<<<<<<< HEAD
            if (recommendations.Any())
            {
                return BuildRecommendationResponse(recommendations, extractedCriteria);
            }

            // Fallback: tr·∫£ l·ªùi d·∫°ng li·ªát k√™ s·∫£n ph·∫©m theo t·ª´ kh√≥a th∆∞·ªùng g·∫∑p
            var fallback = await BuildFallbackListingAsync(userQuery);
            return !string.IsNullOrWhiteSpace(fallback)
                ? fallback
                : "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
=======

            if (recommendations != null && recommendations.Any())
            {
                return await BuildRecommendationResponseAsync(recommendations, extractedCriteria);
            }

            var fallback = await BuildFallbackListingAsync(userQuery);
            return !string.IsNullOrWhiteSpace(fallback)
                ? fallback
                : "‚ùå T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
        }

        public async Task<List<AHPProductScore>> GetPersonalizedRecommendationsAsync(string userQuery, string userSessionId)
        {
            var request = new AHPRecommendationRequest
            {
                UserSessionId = userSessionId,
<<<<<<< HEAD
                // ∆Øu ti√™n keyword ƒë√£ bi·∫øt (office/key) ƒë·ªÉ tƒÉng t·ªâ l·ªá kh·ªõp
                SearchQuery = GuessKeyword(userQuery) ?? ExtractSearchQuery(userQuery),
                CategoryId = ExtractCategoryFromQuery(userQuery)
            };
            request.Comparisons = await GenerateComparisonMatrixFromQueryAsync(userQuery, userSessionId);
            return await _ahpService.GetProductRecommendationsAsync(request);
=======
                SearchQuery = GuessKeyword(userQuery) ?? ExtractSearchQuery(userQuery),
                CategoryId = ExtractCategoryFromQuery(userQuery)
            };

            request.Comparisons = await GenerateComparisonMatrixFromQueryAsync(userQuery, userSessionId);
            var scores = await _ahpService.GetProductRecommendationsAsync(request);
            return (scores ?? new List<AHPProductScore>()).OrderByDescending(s => s.TotalScore).ToList();
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
        }

        public Task<string> ExtractCriteriaFromQueryAsync(string userQuery)
        {
            var criteria = new List<string>();
<<<<<<< HEAD
            var query = userQuery.ToLower();
=======
            var query = (userQuery ?? string.Empty).ToLowerInvariant();
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            var map = new Dictionary<string, string>
            {
                { "gi√°", "Gi√°" }, { "price", "Gi√°" }, { "r·∫ª", "Gi√°" },
                { "ƒë√°nh gi√°", "ƒê√°nh gi√°" }, { "rating", "ƒê√°nh gi√°" }, { "sao", "ƒê√°nh gi√°" },
                { "ch·∫•t l∆∞·ª£ng", "Ch·∫•t l∆∞·ª£ng" }, { "quality", "Ch·∫•t l∆∞·ª£ng" },
                { "b√°n ch·∫°y", "S·ªë l∆∞·ª£ng b√°n" }, { "ph·ªï bi·∫øn", "S·ªë l∆∞·ª£ng b√°n" },
                { "giao h√†ng", "Th·ªùi gian giao h√†ng" }, { "delivery", "Th·ªùi gian giao h√†ng" }, { "nhanh", "Th·ªùi gian giao h√†ng" }
            };
<<<<<<< HEAD
            foreach (var kv in map) if (query.Contains(kv.Key)) criteria.Add(kv.Value);
=======

            foreach (var kv in map)
                if (query.Contains(kv.Key)) criteria.Add(kv.Value);

>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            return Task.FromResult(string.Join(", ", criteria.Distinct()));
        }

        public Task<List<AHPComparisonMatrix>> GenerateComparisonMatrixFromQueryAsync(string userQuery, string userSessionId)
        {
            var list = new List<AHPComparisonMatrix>();
<<<<<<< HEAD
            var priorities = ExtractPrioritiesFromQuery(userQuery.ToLower());
            var criteriaMap = new Dictionary<string, int> { { "gi√°", 1 }, { "ƒë√°nh gi√°", 2 }, { "ch·∫•t l∆∞·ª£ng", 3 }, { "b√°n ch·∫°y", 4 }, { "giao h√†ng", 5 } };
=======
            var priorities = ExtractPrioritiesFromQuery((userQuery ?? string.Empty).ToLowerInvariant());
            var criteriaMap = new Dictionary<string, int> { { "gi√°", 1 }, { "ƒë√°nh gi√°", 2 }, { "ch·∫•t l∆∞·ª£ng", 3 }, { "b√°n ch·∫°y", 4 }, { "giao h√†ng", 5 } };

>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            foreach (var pr in priorities)
            {
                if (!criteriaMap.ContainsKey(pr.Key)) continue;
                var id = criteriaMap[pr.Key];
                foreach (var other in criteriaMap.Where(k => k.Key != pr.Key))
                {
                    list.Add(new AHPComparisonMatrix
                    {
                        CriteriaId1 = id,
                        CriteriaId2 = other.Value,
                        ComparisonValue = CalculateComparisonValue(pr.Value, 5),
                        UserSessionId = userSessionId
                    });
                }
            }
            return Task.FromResult(list);
        }

<<<<<<< HEAD
        private string BuildRecommendationResponse(List<AHPProductScore> recs, string extractedCriteria)
        {
            if (!recs.Any()) return "T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.";
            var sb = new System.Text.StringBuilder();
            sb.AppendLine($"D·ª±a tr√™n c√°c ti√™u ch√≠: {extractedCriteria}, t√¥i g·ª£i √Ω cho b·∫°n c√°c s·∫£n ph·∫©m sau:\n");
            for (int i = 0; i < Math.Min(5, recs.Count); i++)
            {
                var p = recs[i];
                sb.AppendLine($"{i + 1}. {p.ProductName}");
                sb.AppendLine($"   - ƒêi·ªÉm t·ªïng: {p.TotalScore:F2}");
                sb.AppendLine($"   - X·∫øp h·∫°ng: #{p.Rank}");
                if (p.CriteriaScores.Any())
                {
                    sb.AppendLine("   - Chi ti·∫øt ƒëi·ªÉm s·ªë:");
                    foreach (var c in p.CriteriaScores) sb.AppendLine($"     ‚Ä¢ {c.Key}: {c.Value:F2}");
                }
                sb.AppendLine();
            }
            sb.Append("B·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch th√™m v·ªÅ ti√™u ch√≠ ƒë√°nh gi√° ho·∫∑c so s√°nh chi ti·∫øt kh√¥ng?");
            return sb.ToString();
        }

=======
        /// <summary>
        /// Build response text: CH·ªà show Top 3 product (T√™n, Gi√°, M√¥ t·∫£/ng·∫Øn, ∆Øu ƒëi·ªÉm tags). Kh√¥ng show ƒëi·ªÉm AHP.
        /// </summary>
        private async Task<string> BuildRecommendationResponseAsync(List<AHPProductScore> recs, string extractedCriteria)
        {
            if (recs == null || !recs.Any()) return "‚ùå T√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.";

            var top3 = recs.OrderByDescending(r => r.TotalScore).Take(3).ToList();
            var allRaw = await _productManage.GetProductsAsync();
            var all = (allRaw == null) ? new List<object>() : allRaw.Cast<object>().ToList();

            var sb = new StringBuilder();
            var criteriaPart = string.IsNullOrWhiteSpace(extractedCriteria) ? "ti√™u ch√≠ ph√π h·ª£p" : $"c√°c ti√™u ch√≠: {extractedCriteria}";
            sb.AppendLine($"‚ú® D·ª±a tr√™n {criteriaPart}, Tr∆∞·ªùng Shop g·ª£i √Ω Top 3 s·∫£n ph·∫©m ph√π h·ª£p:<br>");

            int idx = 1;
            foreach (var s in top3)
            {
                var product = all.FirstOrDefault(p => GetIntProperty(p, "Id") == s.ProductId);

                var name = product != null ? GetStringProperty(product, "Name") : s.ProductName ?? "S·∫£n ph·∫©m";
                var price = product != null ? GetDoubleProperty(product, "Price") : 0.0;
                var desc = product != null ? GetStringProperty(product, "Description") : string.Empty;
                var brand = product != null ? GetStringProperty(product, "Brand") : string.Empty;

                sb.AppendLine($"{idx}. {name} ‚Äì Gi√°: {(price > 0 ? $"{price:N0}‚Ç´" : $"Li√™n h·ªá")}");
                if (!string.IsNullOrWhiteSpace(desc))sb.AppendLine($"   ‚Ä¢ <b>{Truncate(desc, 300)}</b><br>");
                //if (!string.IsNullOrWhiteSpace(brand)) sb.AppendLine($"   ‚Ä¢ Th∆∞∆°ng hi·ªáu: {brand}");

                var advTags = GenerateAdvantageTags(product, all);
                //if (advTags.Any()) sb.AppendLine($"   ‚Ä¢ ∆Øu ƒëi·ªÉm: {string.Join(" ‚Ä¢ ", advTags)} <br>");

                sb.AppendLine("<br>");
                idx++;
            }

            sb.Append("üëâ B·∫°n mu·ªën m√¨nh t∆∞ v·∫•n chi ti·∫øt h∆°n v·ªÅ s·∫£n ph·∫©m n√†o trong 3 c√°i tr√™n kh√¥ng?");
            return sb.ToString();
        }

        /// <summary>
        /// Fallback: n·∫øu AHP kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ th√¨ li·ªát k√™ Top 3 s·∫£n ph·∫©m theo t·ª´ kh√≥a ho·∫∑c theo gi√° cho 'sinh vi√™n'.
        /// </summary>
        private async Task<string> BuildFallbackListingAsync(string userQuery)
        {
            var keyword = ExtractSearchQuery(userQuery) ?? GuessKeyword(userQuery);
            var listRaw = !string.IsNullOrWhiteSpace(keyword)
                ? await _productManage.GetProductsAsync(keyword)
                : await _productManage.GetProductsAsync();

            var products = (listRaw == null) ? new List<object>() : listRaw.Cast<object>().ToList();
            if (!products.Any()) return string.Empty;

            var q = (userQuery ?? string.Empty).ToLowerInvariant();
            var studentOrCheap = q.Contains("sinh vi√™n") || q.Contains("gi√° r·∫ª") || q.Contains("r·∫ª") || q.Contains("student") || q.Contains("budget");

            if (studentOrCheap)
            {
                products = products.OrderBy(p => GetDoubleProperty(p, "Price")).ToList();
            }

            var sb = new StringBuilder();
            sb.AppendLine("D∆∞·ªõi ƒë√¢y l√† Top 3 s·∫£n ph·∫©m g·ª£i √Ω cho b·∫°n:<br>");

            int i = 1;
            foreach (var p in products.Take(3))
            {
                var name = GetStringProperty(p, "Name");
                var price = GetDoubleProperty(p, "Price");
                var brand = GetStringProperty(p, "Brand");
                sb.AppendLine($"{i++}. {name} ‚Äì Gi√°: {(price > 0 ? $"{price:N0}‚Ç´" : "Li√™n h·ªá")}{(string.IsNullOrWhiteSpace(brand) ? "" : $" ‚Äì {brand}")}<br>");
            }

            return sb.ToString();
        }

        #region Helpers (reflection + utils)

        private static object? GetPropertyValue(object? obj, string propName)
        {
            if (obj == null) return null;
            var prop = obj.GetType().GetProperty(propName, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            return prop?.GetValue(obj);
        }

        private static int GetIntProperty(object? obj, string propName)
        {
            var v = GetPropertyValue(obj, propName);
            if (v == null) return 0;
            try { return Convert.ToInt32(v); } catch { return 0; }
        }

        private static double GetDoubleProperty(object? obj, string propName)
        {
            var v = GetPropertyValue(obj, propName);
            if (v == null) return 0.0;
            try { return Convert.ToDouble(v); } catch { return 0.0; }
        }

        private static string GetStringProperty(object? obj, string propName)
        {
            var v = GetPropertyValue(obj, propName);
            return v?.ToString() ?? string.Empty;
        }

        private List<string> GenerateAdvantageTags(object? product, List<object> allProducts)
        {
            var tags = new List<string>();
            if (product == null || allProducts == null || !allProducts.Any()) return tags;

            try
            {
                var maxPrice = allProducts.Max(p => GetDoubleProperty(p, "Price"));
                var maxSold = allProducts.Max(p => GetIntProperty(p, "Sold"));

                var price = GetDoubleProperty(product, "Price");
                var sold = GetIntProperty(product, "Sold");

                if (maxPrice > 0 && price <= maxPrice * 0.5) tags.Add("Gi√° r·∫ª");
                if (maxSold > 0 && sold >= maxSold * 0.7) tags.Add("B√°n ch·∫°y");
                if (maxPrice > 0 && price >= maxPrice * 0.85) tags.Add("Ch·∫•t l∆∞·ª£ng cao");

                var brand = GetStringProperty(product, "Brand");
                if (!string.IsNullOrWhiteSpace(brand)) tags.Add($"Th∆∞∆°ng hi·ªáu: {brand}");

                if (!tags.Any()) tags.Add("Ph√π h·ª£p nhu c·∫ßu");
            }
            catch
            {
                tags.Add("Ph√π h·ª£p nhu c·∫ßu");
            }

            return tags.Distinct().ToList();
        }

        private static string Truncate(string text, int maxLen)
        {
            if (string.IsNullOrEmpty(text)) return string.Empty;
            if (text.Length <= maxLen) return text;
            return text.Substring(0, maxLen).TrimEnd() + "...";
        }

        #endregion

        #region Query parsing helpers

>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
        private int? ExtractCategoryFromQuery(string userQuery) => null;

        private string? ExtractSearchQuery(string userQuery)
        {
<<<<<<< HEAD
            var k = new[] { "t√¨m", "search", "c√≥", "b√°n", "mua" };
            var lower = userQuery.ToLower();
            foreach (var kw in k)
            {
                if (!lower.Contains(kw)) continue;
                var idx = lower.IndexOf(kw);
                var after = userQuery.Substring(idx + kw.Length).Trim();
                // Chu·∫©n h√≥a ƒë∆°n gi·∫£n: n·∫øu c√≥ "office" trong chu·ªói sau, tr·∫£ v·ªÅ "office"
                var afterLower = after.ToLower();
                if (afterLower.Contains("office")) return "office";
                if (afterLower.Contains("key")) return "key";
                // N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, b·ªè qua ƒë·ªÉ tr√°nh truy v·∫•n kh√≥ kh·ªõp
                if (!string.IsNullOrWhiteSpace(after)) return null;
            }
=======
            if (string.IsNullOrWhiteSpace(userQuery)) return null;
            var keywords = new[] { "office", "key", "di·ªát virus", "chatgpt", "vpn", "autocad" };
            var low = userQuery.ToLowerInvariant();
            foreach (var kw in keywords) if (low.Contains(kw)) return kw;
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            return null;
        }

        private string? GuessKeyword(string userQuery)
        {
<<<<<<< HEAD
            var q = userQuery.ToLower();
=======
            if (string.IsNullOrWhiteSpace(userQuery)) return null;
            var q = userQuery.ToLowerInvariant();
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            if (q.Contains("office")) return "office";
            if (q.Contains("key")) return "key";
            return null;
        }

        private Dictionary<string, int> ExtractPrioritiesFromQuery(string q)
        {
            var result = new Dictionary<string, int>();
<<<<<<< HEAD
            var importance = new Dictionary<string, int> { { "r·∫•t quan tr·ªçng", 9 }, { "quan tr·ªçng", 7 }, { "kh√° quan tr·ªçng", 5 }, { "b√¨nh th∆∞·ªùng", 3 }, { "kh√¥ng quan tr·ªçng", 1 } };
            foreach (var kv in importance)
            {
                if (!q.Contains(kv.Key)) continue;
                foreach (var c in new[] { "gi√°", "ƒë√°nh gi√°", "ch·∫•t l∆∞·ª£ng", "b√°n ch·∫°y", "giao h√†ng" }) if (q.Contains(c)) result[c] = kv.Value;
            }
            // ∆Øu ti√™n gi√° r·∫ª n·∫øu ng∆∞·ªùi d√πng l√† sinh vi√™n/nh·∫Øc ƒë·∫øn gi√° r·∫ª
=======
            var importance = new Dictionary<string, int>
            {
                { "r·∫•t quan tr·ªçng", 9 }, { "quan tr·ªçng", 7 }, { "kh√° quan tr·ªçng", 5 },
                { "b√¨nh th∆∞·ªùng", 3 }, { "kh√¥ng quan tr·ªçng", 1 }
            };

            foreach (var kv in importance)
            {
                if (!q.Contains(kv.Key)) continue;
                foreach (var c in new[] { "gi√°", "ƒë√°nh gi√°", "ch·∫•t l∆∞·ª£ng", "b√°n ch·∫°y", "giao h√†ng" })
                    if (q.Contains(c)) result[c] = kv.Value;
            }

>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            var studentHints = new[] { "sinh vi√™n", "sv", "student" };
            var cheapHints = new[] { "gi√° r·∫ª", "r·∫ª", "ti·∫øt ki·ªám", "budget" };
            if (studentHints.Any(h => q.Contains(h)) || cheapHints.Any(h => q.Contains(h)))
            {
                result["gi√°"] = 9;
                if (!result.ContainsKey("ch·∫•t l∆∞·ª£ng")) result["ch·∫•t l∆∞·ª£ng"] = 5;
                if (!result.ContainsKey("ƒë√°nh gi√°")) result["ƒë√°nh gi√°"] = 4;
            }
<<<<<<< HEAD
            // C√¢u c·∫•u tr√∫c "gi√° r·∫ª h∆°n ch·∫•t l∆∞·ª£ng" ‚Üí gi√° > ch·∫•t l∆∞·ª£ng
            if (q.Contains("gi√° r·∫ª h∆°n ch·∫•t l∆∞·ª£ng") || q.Contains("gi√° h∆°n ch·∫•t l∆∞·ª£ng") || q.Contains("∆∞u ti√™n gi√° h∆°n ch·∫•t l∆∞·ª£ng"))
=======

            if (q.Contains("gi√° r·∫ª h∆°n ch·∫•t l∆∞·ª£ng") || q.Contains("∆∞u ti√™n gi√° h∆°n ch·∫•t l∆∞·ª£ng"))
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            {
                result["gi√°"] = 9;
                result["ch·∫•t l∆∞·ª£ng"] = result.ContainsKey("ch·∫•t l∆∞·ª£ng") ? Math.Min(result["ch·∫•t l∆∞·ª£ng"], 5) : 5;
            }
<<<<<<< HEAD
            if (!result.Any()) { result["gi√°"] = 7; result["ƒë√°nh gi√°"] = 5; result["ch·∫•t l∆∞·ª£ng"] = 5; }
=======

            if (!result.Any())
            {
                result["gi√°"] = 7;
                result["ƒë√°nh gi√°"] = 5;
                result["ch·∫•t l∆∞·ª£ng"] = 5;
            }

>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
            return result;
        }

        private double CalculateComparisonValue(int a, int b) => a == b ? 1.0 : a > b ? (double)a / b : (double)b / a;

<<<<<<< HEAD
        private async Task<string> BuildFallbackListingAsync(string userQuery)
        {
            var keyword = ExtractSearchQuery(userQuery) ?? GuessKeyword(userQuery);
            var list = !string.IsNullOrWhiteSpace(keyword)
                ? await _productManage.GetProductsAsync(keyword)
                : await _productManage.GetProductsAsync();

            var products = list?.ToList() ?? new List<Entities.Product>();
            if (!products.Any()) return string.Empty;

            // ∆Øu ti√™n hi·ªÉn th·ªã gi√° r·∫ª n·∫øu c√≥ g·ª£i √Ω sinh vi√™n/gi√° r·∫ª
            var q = userQuery.ToLower();
            var studentOrCheap = q.Contains("sinh vi√™n") || q.Contains("gi√° r·∫ª") || q.Contains("r·∫ª") || q.Contains("student") || q.Contains("budget");
            if (studentOrCheap)
            {
                products = products.OrderBy(p => p.Price).ToList();
            }

            var sb = new System.Text.StringBuilder();
            sb.AppendLine("D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p:");
            int i = 1;
            foreach (var p in products.Take(5))
            {
                sb.AppendLine($"{i++}. {p.Name} - Gi√°: {p.Price:N0}‚Ç´ - Th∆∞∆°ng hi·ªáu: {p.Brand}");
            }
            return sb.ToString();
        }
    }
}


=======
        #endregion
    }
}
>>>>>>> ca0995f49d8fcd9cfc33ae0a511771982a1630f6
